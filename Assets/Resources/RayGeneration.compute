#pragma kernel RayGeneration

#include "Common.cginc"

float4x4 CamToWorld;
float4x4 CamInvProj;

[numthreads(64, 1, 1)]
void RayGeneration(uint3 id : SV_DispatchThreadID) 
{
    if (id.x >= TotalRays)
    {
        return;
    }
    
    const uint rayIndex = id.x;
    const uint2 pixelCoords = uint2(rayIndex % OutputWidth, rayIndex / OutputWidth);

    float3 origin = mul(CamToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float2 uv = float2(pixelCoords.xy / float2(OutputWidth, OutputHeight) * 2.0f - 1.0f);
    float3 direction = mul(CamInvProj, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space
    direction = mul(CamToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    RayBuffer[rayIndex].origin = origin;
    RayBuffer[rayIndex].direction = direction;
}