#pragma kernel RayIntersection

#include "Common.cginc"

struct TLASNode
{
    float3 lmin; 
    uint left;
    float3 lmax; 
    uint right;
    float3 rmin; 
    uint triCount;
    float3 rmax; 
    uint firstTri;
};

struct BLASInstance
{
    float4x4 invTransform;
    uint nodeOffset;
    uint triOffset;
};

// Nodes in CWBVH format.
struct BVHNode
{
    float4 n0;
    float4 n1;
    float4 n2;
    float4 n3;
    float4 n4;
};

StructuredBuffer<TLASNode> TLASNodes;
StructuredBuffer<int> TLASIndices;
StructuredBuffer<BLASInstance> BLASInstances;
StructuredBuffer<BVHNode> BVHNodes;
StructuredBuffer<float4> BVHTris;

// Stack size for BVH traversal
#define STACK_SIZE 32

#define SWAP(type, a, b) { type temp = a; a = b; b = temp; }

uint ExtractByte(uint value, uint byteIndex)
{
    return (value >> (byteIndex * 8)) & 0xFF;
}

// Extracts each byte from the float into the channel of a float4
float4 ExtractBytes(float value)
{
    uint packed = asuint(value);

    float4 channels = float4(
        ExtractByte(packed, 0),
        ExtractByte(packed, 1),
        ExtractByte(packed, 2),
        ExtractByte(packed, 3)
    );

    return channels;
}

float3 GetNodeInvDir(float n0w, float3 invDir)
{
    uint packed = asuint(n0w);

    // Extract each byte and sign extend
    uint e_x = (ExtractByte(packed, 0) ^ 0x80) - 0x80;
    uint e_y = (ExtractByte(packed, 1) ^ 0x80) - 0x80;
    uint e_z = (ExtractByte(packed, 2) ^ 0x80) - 0x80;

    return float3(
        asfloat((e_x + 127) << 23) * invDir.x,
        asfloat((e_y + 127) << 23) * invDir.y,
        asfloat((e_z + 127) << 23) * invDir.z
    );
}

uint IntersectCWBVHNode(float3 origin, float3 invDir, uint octinv4, float tmax, const BVHNode node)
{
    uint hitmask = 0;
    float3 nodeInvDir = GetNodeInvDir(node.n0.w, invDir);
    float3 nodePos = (node.n0.xyz - origin) * invDir;
    
    // i = 0 checks the first 4 children, i = 1 checks the second 4 children.
    [unroll]
    for (int i = 0; i < 2; ++i)
    {
        uint meta = asuint(i == 0 ? node.n1.z : node.n1.w);
        
        float4 lox = ExtractBytes(invDir.x < 0.0f ? (i == 0 ? node.n3.z : node.n3.w) : (i == 0 ? node.n2.x : node.n2.y));
        float4 loy = ExtractBytes(invDir.y < 0.0f ? (i == 0 ? node.n4.x : node.n4.y) : (i == 0 ? node.n2.z : node.n2.w));
        float4 loz = ExtractBytes(invDir.z < 0.0f ? (i == 0 ? node.n4.z : node.n4.w) : (i == 0 ? node.n3.x : node.n3.y));
        float4 hix = ExtractBytes(invDir.x < 0.0f ? (i == 0 ? node.n2.x : node.n2.y) : (i == 0 ? node.n3.z : node.n3.w));
        float4 hiy = ExtractBytes(invDir.y < 0.0f ? (i == 0 ? node.n2.z : node.n2.w) : (i == 0 ? node.n4.x : node.n4.y));
        float4 hiz = ExtractBytes(invDir.z < 0.0f ? (i == 0 ? node.n3.x : node.n3.y) : (i == 0 ? node.n4.z : node.n4.w));
                             
        float4 tminx = lox * nodeInvDir.x + nodePos.x;
        float4 tmaxx = hix * nodeInvDir.x + nodePos.x;
        float4 tminy = loy * nodeInvDir.y + nodePos.y;
        float4 tmaxy = hiy * nodeInvDir.y + nodePos.y;
        float4 tminz = loz * nodeInvDir.z + nodePos.z;
        float4 tmaxz = hiz * nodeInvDir.z + nodePos.z;
                        
        float4 cmin = max(max(max(tminx, tminy), tminz), 0.0f);
        float4 cmax = min(min(min(tmaxx, tmaxy), tmaxz), tmax);
        
        uint isInner = (meta & (meta << 1)) & 0x10101010;
        uint innerMask = (isInner >> 4) * 0xffu;
        uint bitIndex = (meta ^ (octinv4 & innerMask)) & 0x1F1F1F1F;
        uint childBits = (meta >> 5) & 0x07070707;

        [unroll]
        for (int j = 0; j < 4; ++j)
        {
            if (cmin[j] <= cmax[j])
            {
                uint shiftBits = (childBits >> (j * 8)) & 255;
                uint bitShift = (bitIndex >> (j * 8)) & 31;
                hitmask |= shiftBits << bitShift;
            }
        }
    }

    return hitmask;
}

void IntersectTriangle(int triAddr, const Ray ray, inout RayHit hit)
{
    float3 e1 = BVHTris[triAddr + 0].xyz;
    float3 e2 = BVHTris[triAddr + 1].xyz;
    float4 v0 = BVHTris[triAddr + 2];
    
    float3 r = cross(ray.direction.xyz, e1);
    float a = dot(e2, r);
            
    if (abs(a) > 0.0000001f)
    {
        float f = 1.0f / a;
        float3 s = ray.origin.xyz - v0.xyz;
        float u = f * dot(s, r);
        
        if (u >= 0.0f && u <= 1.0f)
        {
            float3 q = cross(s, e2);
            float v = f * dot(ray.direction.xyz, q);
            
            if (v >= 0.0f && u + v <= 1.0f)
            {
                float d = f * dot(e1, q);
                
                if (d > 0.0f && d < hit.t)
                {
                    hit.t = d;
                    hit.barycentric = float2(u, v);
                    hit.triIndex = asuint(v0.w);
                }
            }
        }
    }
}

RayHit CastRayCWBVH(const Ray ray, uint nodeOffset, uint triOffset)
{
    RayHit hit = (RayHit) 0;
    hit.t = FarPlane;

    float3 invDir = rcp(ray.direction.xyz);
    uint octinv4 = (7 - ((ray.direction.x < 0 ? 4 : 0) | (ray.direction.y < 0 ? 2 : 0) | (ray.direction.z < 0 ? 1 : 0))) * 0x1010101;
    
    uint2 stack[STACK_SIZE];
    uint stackPtr = 0;
    uint2 nodeGroup = uint2(0, 0x80000000);
    uint2 triGroup = uint2(0, 0);
    
    while (true)
    {
        if (nodeGroup.y > 0x00FFFFFF)
        {
            uint mask = nodeGroup.y;
            uint childBitIndex = firstbithigh(mask);
            uint childNodeBaseIndex = nodeGroup.x;
            
            nodeGroup.y &= ~(1 << childBitIndex);
            if (nodeGroup.y > 0x00FFFFFF) 
            { 
                // Push onto stack
                stack[stackPtr++] = nodeGroup;
            }
            
            uint slotIndex = (childBitIndex - 24) ^ (octinv4 & 255);
            uint relativeIndex = countbits(mask & ~(0xFFFFFFFF << slotIndex));
            uint childNodeIndex = nodeOffset + childNodeBaseIndex + relativeIndex;

            BVHNode node = BVHNodes[childNodeIndex];
            uint hitmask = IntersectCWBVHNode(ray.origin, invDir, octinv4, hit.t, node);

            nodeGroup.x = asuint(node.n1.x);
            nodeGroup.y = (hitmask & 0xFF000000) | (asuint(node.n0.w) >> 24);
            triGroup.x = asuint(node.n1.y);
            triGroup.y = hitmask & 0x00FFFFFF;
            hit.steps++;
        }
        else
        {
            triGroup = nodeGroup;
            nodeGroup = uint2(0, 0);
        }
        
        // Process all triangles in the current group
        while (triGroup.y != 0)
        {
            int triangleIndex = firstbithigh(triGroup.y);
            int triAddr = triOffset + triGroup.x + (triangleIndex * 3);
            
            // Check intersection and update hit if its closer
            IntersectTriangle(triAddr, ray, hit);
            
            triGroup.y -= 1 << triangleIndex;
        }
        
        if (nodeGroup.y <= 0x00FFFFFF)
        {
            if (stackPtr > 0) 
            { 
                // Pop the stack
                nodeGroup = stack[--stackPtr];
            }
            else
            {
                // Traversal complete, exit loop
                break;
            }
        }
    }
    
    return hit;
}

RayHit CastRayTLAS(const Ray ray)
{
    RayHit hit = (RayHit) 0;
    hit.t = FarPlane;

    uint nodeIdx = 0;
    uint stack[STACK_SIZE];
    uint stackPtr = 0;

    Ray blasRay = ray;
    float3 invDir = rcp(ray.direction.xyz);

    while (true)
    {
        TLASNode node = TLASNodes[nodeIdx];
		//uint triCount = asuint(node.rmin.w);

        if (node.triCount > 0)
		{
            // Process leaf node
            //uint firstTri = asuint(rmax.w);
            for (uint i = 0; i < node.triCount; i++)
            {
                uint instIdx = TLASIndices[node.firstTri + i];
                BLASInstance inst = BLASInstances[instIdx];

                blasRay.origin = mul(inst.invTransform, float4(ray.origin.xyz, 1.0f)).xyz;
                blasRay.direction = mul(inst.invTransform, float4(ray.direction.xyz, 0.0f)).xyz;

                // Intersect with CWBVH BLAS
                RayHit cwbvhHit = CastRayCWBVH(blasRay, inst.nodeOffset, inst.triOffset);
                if (cwbvhHit.t < hit.t) 
				{
					hit = cwbvhHit;
					hit.triIndex = inst.triOffset + hit.triIndex;
				}
            }
        }

        //uint left = asuint(node.lmin.w);
        //uint right = asuint(node.lmax.w);

		// Child AABB intersection tests
		float3 t1a = (node.lmin.xyz - ray.origin.xyz) * invDir.xyz;
        float3 t2a = (node.lmax.xyz - ray.origin.xyz) * invDir.xyz;
		float3 t1b = (node.rmin.xyz - ray.origin.xyz) * invDir.xyz;
        float3 t2b = (node.rmax.xyz - ray.origin.xyz) * invDir.xyz;
		float3 minta = min(t1a, t2a);
        float3 maxta = max(t1a, t2a);
		float3 mintb = min(t1b, t2b);
        float3 maxtb = max(t1b, t2b);
		float tmina = max(max(max(minta.x, minta.y), minta.z), 0);
		float tminb = max(max(max(mintb.x, mintb.y), mintb.z), 0);
		float tmaxa = min(min(min(maxta.x, maxta.y), maxta.z), hit.t);
		float tmaxb = min(min(min(maxtb.x, maxtb.y), maxtb.z), hit.t);
		float dist1 = tmina > tmaxa ? 1e30f : tmina;
		float dist2 = tminb > tmaxb ? 1e30f : tminb;

		// Traverse nearest child first
		if (dist1 > dist2)
		{
            SWAP(float, dist1, dist2);
            SWAP(uint, node.left, node.right);
		}

		if (dist1 == 1e30f) 
        { 
            if (stackPtr == 0)
            {
                break;
            }  
            else 
            {
                nodeIdx = stack[--stackPtr]; 
            }
        }
		else 
        { 
            nodeIdx = node.left; 
            if (dist2 != 1e30f) 
            {
                stack[stackPtr++] = node.right; 
            }
        }
    }

    return hit;
}

[numthreads(64, 1, 1)]
void RayIntersection(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= TotalRays)
    {
        return;
    }

    const uint rayIndex = id.x;
    
    Ray ray = RayBuffer[rayIndex];
    RayHit hit = CastRayTLAS(ray);
    RayHitBuffer[rayIndex] = hit;
}